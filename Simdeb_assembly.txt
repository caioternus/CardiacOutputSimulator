#include <pic.h>
#include <htc.h>
#include <stdio.h>

__CONFIG (WDTDIS & MCLRDIS & INTIO & PWRTEN);       // general configuration

#ifndef _XTAL_FREQ
#define _XTAL_FREQ 4000000
#endif

#define   LED_yellow RA1                            // pin 18
#define   LED_red RA2                               // pin 17
#define   fan   RA0                                 // pin 19

int   valor, potencia, erro, p, set_point, a, b;
char  aux;

void interrupt recepcao(void)
{
   if (RCIF==1)
   {
        aux=RCREG;
   }
}

void manda_temperatura (unsigned char tx)       // function for transmitting the adc value through serial port
{
   while(TRMT==0){};
   
        // the TRMT bit is used to see whether the buffer is being used or not. 1 (free) or 0 (busy).
        // this loop is used to wait until the buffer is free, i.e. TRMT=1

   TXREG=tx;
}

void config(void)                               // general configuration
{
   // Input/Output pin configuration
    ANSEL=0b00010000;                           // enables analog input an4
    ANSELH=0;
    TRISA=0;
    TRISB=0;
    TRISC=0b00010001;         // pins 16 and 6 are inputs initially (sensor and p1b, respectivelly)  

                              // configuring the serial port to 9600 bps (bits per second)
    BRGH=1;
    BRG16=0;
    SYNC=0;                   // configure asynchronous serial transmissions
    SPBRGH=0;
    SPBRG=25;
    SPEN=1;                   // enables serial port
    TXEN=1;                   // enables serial transmission
    TXIE=0;                   // disables transmission interruption
    TX9=0;                    // enables 8-bit transmission
    TX9D=0;                   // transmits 8 bits of data

    RCIE=1;                   // enables reception interruption
    PEIE=1;                   // enables peripheral interrupt
    RX9=0;                    // disables 9-bit mode
    CREN=1;                   // enables serial reception

                              // analog-to-digital converter
    ADCON0=0b00010001;        // left justification, Vdd reference, analog channel an4 (pin 16), godone=0
    //ADCON1=0b00010000;      // Fosc/8
    //ADIE=1;
    //ADIF=0;

                              // interruptions
    GIE=1;
    PEIE=1;
	TMR1IE=0;

                             // pulse width modulation setup, Fpwm= 10KHZ, Fosc=4MHz
    PR2=99;
    CCP1CON=0b10001100;
    T2CON=0b00000100;        // setup for microcontroller postscaler 1:1, PS 1:1
    CCPR1L=0;                // CCPR1L register goes from 0 to 99 (PR2) for 8-bit pwm
    
                             // clear flags
    LED_yellow=0;
	fan=0;
  	LED_red=0;
  	aux=0;
}

void converte (void)         // valor receives adc
{
     GODONE=1;
     while(GODONE);
     valor=ADRESH;
}

void altera (void)          // function that inverts the polarity of the peltier device to reduce temperature
{    
     TRISC5=1;
     __delay_us(5);
     TRISC4=0;
}

void retorna (void)

          // function that monitors temperature and inverts the peltier polarity when the temperature is 36.5 Â°C
{
     while(valor<112)
	{
     converte();
     manda_temperatura(valor);
	}                   
     TRISC4=1;
     __delay_us(5);
     TRISC5=0;
}     
/*void referencia (void)     // function to reference bootstrap capacitor of upper transistor in the h-bridge circuit
{
if (TRISC4==1){
	TRISC5=0;
		
}
if (TRISC5==1){
		
}

}*/
void controle_estabiliza (void)          // function to stabilize temperature at set-point
{
	converte();
//	manda_temperatura(valor);
	erro=set_point-valor;           // error value
	potencia=erro*p;
	if (potencia>=0) a=1;
	if (potencia<0) b=1;
	if (potencia>255) potencia=255;
	if (a==1)
	{
		CCPR1L+=(potencia*100)/255;
		if (CCPR1L>=100) CCPR1L=100;
		TRISC4=1;
		__delay_us(5);
		TRISC5=0;
		a=0;
	}
	if (b==1)
	{
		potencia=potencia*(-1);
		if (potencia>255) potencia=255;
		CCPR1L+=(potencia*100)/255;
		if (CCPR1L>=100) CCPR1L=100;
		TRISC5=1;
		__delay_us(5);
		TRISC4=0;
		b=0;
	}
}	

void main(void)                             // main program
{
  	config();
  	// if (aux==140) set_point=aux;
  	set_point=128;                     // set_point is the blood stable temperature
	p=2;                               // proportional gain
  	LED_yellow=1;
	fan=1;
  	LED_red=0;
   	// while(aux!=127);                // aux is used to start of the simulation, a variable sent from desktop GUI
   	
	/* for(int g=0;g<=133;g++)         // loop to stabilize the temperature for 10 seconds
	{
		controle_estabiliza();   		
		__delay_ms(100);
	}*/
	// referencia();
    while(1)
  	{   
        //altera();
        //retorna();
  		controle_estabiliza(); 			
     /* while (aux!=155)
     {
         TMR2ON=0;
         TRISC4=1;
         TRISC5=1;   
         LED_yellow=0;
         LED_red=1;
     } */
     
   }  
}   
