#include <pic.h>
#include <htc.h>
#include <stdio.h>

__CONFIG (WDTDIS & MCLRDIS & INTIO & PWRTEN);       // general configuration

#ifndef _XTAL_FREQ
#define _XTAL_FREQ 4000000
#endif

#define   LED_yellow RA1                            // pin 18
#define   LED_red RA2                               // pin 17
#define   fan   RA0                                 // pin 19

int   valor, potencia, erro, p, set_point, a, b;
char  aux;

void interrupt recepcao(void)
{
   if (RCIF==1)
   {
        aux=RCREG;
   }
}

void manda_temperatura (unsigned char tx)       // function for transmitting the adc value through serial port
{
   while(TRMT==0){};
   
        // O bit TRMT serve para ver se o buffer está sendo utilizado ou não. 1(livre) ou 0(ocupado).
        // Este laço de repetição serve para esperar até o buffer estar livre, ou seja, TRMT=1

   TXREG=tx;
}

void config(void)                               // general configuration
{
   // Input/Output pin configuration
    ANSEL=0b00010000;                           // Enables analog input an4
    ANSELH=0;
    TRISA=0;
    TRISB=0;
    TRISC=0b00010001;         // Pins 16 and 6 are inputs initially (sensor and p1b, respectivelly)  

                              // Configurando a porta serial para 9600 bps (bits per second)
    BRGH=1;
    BRG16=0;
    SYNC=0;                   // configura  transmissões seriais assíncronas
    SPBRGH=0;
    SPBRG=25;
    SPEN=1;                   // habilita porta serial
    TXEN=1;                   // habilita a transmissão serial
    TXIE=0;                   // desabilita a interrupção por transmissão
    TX9=0;                    // habilita a transmissão de 8 bits
    TX9D=0;                   // transmite 8 bits de dados

    RCIE=1;                   // habilita a interrupção por recepção
    PEIE=1;                   // habilita a interrupção periférica
    RX9=0;                    // desabilita modo 9 bits
    CREN=1;                   // habilita a recepção serial

                              // Conversor AD
    ADCON0=0b00010001;        // justificação à esquerda, referência de Vdd, canal analógico an4 (pino 16), godone=0
    //ADCON1=0b00010000;      // Fosc/8
    //ADIE=1;
    //ADIF=0;

                              // Interrupções
    GIE=1;
    PEIE=1;
	TMR1IE=0;

                             // PWM, Fpwm= 10KHZ, Fosc=4MHz
    PR2=99;
    CCP1CON=0b10001100;
    T2CON=0b00000100;        // PostS 1:1, PS 1:1
    CCPR1L=0;                // CCPR1L vai de 0 até 99 (PR2), pwm de 8 bits
    
                             // limpa flags
    LED_yellow=0;
	fan=0;
  	LED_red=0;
  	aux=0;
}

void converte (void)         // valor recebe adc
{
     GODONE=1;
     while(GODONE);
     valor=ADRESH;
}

void altera (void)           // função que inverte polaridade do peltier para diminuir temperatura
{    
     TRISC5=1;
     __delay_us(5);
     TRISC4=0;
}

void retorna (void)          // função que monitora temperatura e desinverte a polaridade do peltier quando temperatura for 36.5
{
     while(valor<112)
	{
     converte();
     manda_temperatura(valor);
	}                   
     TRISC4=1;
     __delay_us(5);
     TRISC5=0;
}     
/*void referencia (void)     // função para referenciar capacitor de bootstrap do transistor superior
{
if (TRISC4==1){
	TRISC5=0;
		
}
if (TRISC5==1){
		
}

}*/
void controle_estabiliza (void)     // função para estabilizar temperatura em set-point
{
	converte();
//	manda_temperatura(valor);
	erro=set_point-valor;           // error value
	potencia=erro*p;
	if (potencia>=0) a=1;
	if (potencia<0) b=1;
	if (potencia>255) potencia=255;
	if (a==1)
	{
		CCPR1L+=(potencia*100)/255;
		if (CCPR1L>=100) CCPR1L=100;
		TRISC4=1;
		__delay_us(5);
		TRISC5=0;
		a=0;
	}
	if (b==1)
	{
		potencia=potencia*(-1);
		if (potencia>255) potencia=255;
		CCPR1L+=(potencia*100)/255;
		if (CCPR1L>=100) CCPR1L=100;
		TRISC5=1;
		__delay_us(5);
		TRISC4=0;
		b=0;
	}
}	

void main(void)                        // main program
{
  	config();
  	// if (aux==140) set_point=aux;
  	set_point=128;                     // set_point is the blood stable temperature
	p=2;                               // proportional gain
  	LED_yellow=1;
	fan=1;
  	LED_red=0;
   	// while(aux!=127);      // aux is the start of the simulation, a variable sent from desktop GUI
   	
	/* for(int g=0;g<=133;g++)          // fica estabilizando por 10s
	{
		controle_estabiliza();   		
		__delay_ms(100);
	}*/
	// referencia();
    while(1)
  	{   
        //altera();
        //retorna();
  		controle_estabiliza(); 			
     /* while (aux!=155)
     {
         TMR2ON=0;
         TRISC4=1;
         TRISC5=1;   
         LED_yellow=0;
         LED_red=1;
     } */
     
   }  
}   
